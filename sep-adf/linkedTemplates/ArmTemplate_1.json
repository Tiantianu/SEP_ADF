{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "sep-adf"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/wwiinovoices')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase3",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "InvoiceID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "CustomerID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "BillToCustomerID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "OrderID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "DeliveryMethodID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "ContactPersonID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "AccountsPersonID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "SalespersonPersonID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "PackedByPersonID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "InvoiceDate",
						"type": "date"
					},
					{
						"name": "CustomerPurchaseOrderNumber",
						"type": "nvarchar"
					},
					{
						"name": "IsCreditNote",
						"type": "bit"
					},
					{
						"name": "CreditNoteReason",
						"type": "nvarchar"
					},
					{
						"name": "Comments",
						"type": "nvarchar"
					},
					{
						"name": "DeliveryInstructions",
						"type": "nvarchar"
					},
					{
						"name": "InternalComments",
						"type": "nvarchar"
					},
					{
						"name": "TotalDryItems",
						"type": "int",
						"precision": 10
					},
					{
						"name": "TotalChillerItems",
						"type": "int",
						"precision": 10
					},
					{
						"name": "DeliveryRun",
						"type": "nvarchar"
					},
					{
						"name": "RunPosition",
						"type": "nvarchar"
					},
					{
						"name": "ReturnedDeliveryData",
						"type": "nvarchar"
					},
					{
						"name": "ConfirmedDeliveryTime",
						"type": "datetime2",
						"scale": 7
					},
					{
						"name": "ConfirmedReceivedBy",
						"type": "nvarchar"
					},
					{
						"name": "LastEditedBy",
						"type": "int",
						"precision": 10
					},
					{
						"name": "LastEditedWhen",
						"type": "datetime2",
						"scale": 7
					}
				],
				"typeProperties": {
					"schema": "Sales",
					"table": "Invoices"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/wwiorderlines')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase3",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "OrderLineID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "OrderID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "StockItemID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Description",
						"type": "nvarchar"
					},
					{
						"name": "PackageTypeID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Quantity",
						"type": "int",
						"precision": 10
					},
					{
						"name": "UnitPrice",
						"type": "decimal",
						"precision": 18,
						"scale": 2
					},
					{
						"name": "TaxRate",
						"type": "decimal",
						"precision": 18,
						"scale": 3
					},
					{
						"name": "PickedQuantity",
						"type": "int",
						"precision": 10
					},
					{
						"name": "PickingCompletedWhen",
						"type": "datetime2",
						"scale": 7
					},
					{
						"name": "LastEditedBy",
						"type": "int",
						"precision": 10
					},
					{
						"name": "LastEditedWhen",
						"type": "datetime2",
						"scale": 7
					}
				],
				"typeProperties": {
					"schema": "Sales",
					"table": "OrderLines"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/wwiorders')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase3",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "OrderID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "CustomerID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "SalespersonPersonID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "PickedByPersonID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "ContactPersonID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "BackorderOrderID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "OrderDate",
						"type": "date"
					},
					{
						"name": "ExpectedDeliveryDate",
						"type": "date"
					},
					{
						"name": "CustomerPurchaseOrderNumber",
						"type": "nvarchar"
					},
					{
						"name": "IsUndersupplyBackordered",
						"type": "bit"
					},
					{
						"name": "Comments",
						"type": "nvarchar"
					},
					{
						"name": "DeliveryInstructions",
						"type": "nvarchar"
					},
					{
						"name": "InternalComments",
						"type": "nvarchar"
					},
					{
						"name": "PickingCompletedWhen",
						"type": "datetime2",
						"scale": 7
					},
					{
						"name": "LastEditedBy",
						"type": "int",
						"precision": 10
					},
					{
						"name": "LastEditedWhen",
						"type": "datetime2",
						"scale": 7
					}
				],
				"typeProperties": {
					"schema": "Sales",
					"table": "Orders"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/wwiorders_sink')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase3",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "OrderID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "CustomerID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "SalespersonPersonID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "PickedByPersonID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "ContactPersonID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "BackorderOrderID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "OrderDate",
						"type": "date"
					},
					{
						"name": "ExpectedDeliveryDate",
						"type": "date"
					},
					{
						"name": "CustomerPurchaseOrderNumber",
						"type": "nvarchar"
					},
					{
						"name": "IsUndersupplyBackordered",
						"type": "bit"
					},
					{
						"name": "Comments",
						"type": "nvarchar"
					},
					{
						"name": "DeliveryInstructions",
						"type": "nvarchar"
					},
					{
						"name": "InternalComments",
						"type": "nvarchar"
					},
					{
						"name": "PickingCompletedWhen",
						"type": "datetime2",
						"scale": 7
					},
					{
						"name": "LastEditedBy",
						"type": "int",
						"precision": 10
					},
					{
						"name": "LastEditedWhen",
						"type": "datetime2",
						"scale": 7
					}
				],
				"typeProperties": {
					"schema": "Sales",
					"table": "Orders"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/wwipackagetype')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase3",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "PackageTypeID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "PackageTypeName",
						"type": "nvarchar"
					},
					{
						"name": "LastEditedBy",
						"type": "int",
						"precision": 10
					},
					{
						"name": "ValidFrom",
						"type": "datetime2",
						"scale": 7
					},
					{
						"name": "ValidTo",
						"type": "datetime2",
						"scale": 7
					}
				],
				"typeProperties": {
					"schema": "Warehouse",
					"table": "PackageTypes"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/wwipeople')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase3",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "PersonID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "FullName",
						"type": "nvarchar"
					},
					{
						"name": "PreferredName",
						"type": "nvarchar"
					},
					{
						"name": "SearchName",
						"type": "nvarchar"
					},
					{
						"name": "IsPermittedToLogon",
						"type": "bit"
					},
					{
						"name": "LogonName",
						"type": "nvarchar"
					},
					{
						"name": "IsExternalLogonProvider",
						"type": "bit"
					},
					{
						"name": "HashedPassword",
						"type": "varbinary"
					},
					{
						"name": "IsSystemUser",
						"type": "bit"
					},
					{
						"name": "IsEmployee",
						"type": "bit"
					},
					{
						"name": "IsSalesperson",
						"type": "bit"
					},
					{
						"name": "UserPreferences",
						"type": "nvarchar"
					},
					{
						"name": "PhoneNumber",
						"type": "nvarchar"
					},
					{
						"name": "FaxNumber",
						"type": "nvarchar"
					},
					{
						"name": "EmailAddress",
						"type": "nvarchar"
					},
					{
						"name": "Photo",
						"type": "varbinary"
					},
					{
						"name": "CustomFields",
						"type": "nvarchar"
					},
					{
						"name": "OtherLanguages",
						"type": "nvarchar"
					},
					{
						"name": "LastEditedBy",
						"type": "int",
						"precision": 10
					},
					{
						"name": "ValidFrom",
						"type": "datetime2",
						"scale": 7
					},
					{
						"name": "ValidTo",
						"type": "datetime2",
						"scale": 7
					}
				],
				"typeProperties": {
					"schema": "Application",
					"table": "People"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/wwistockitems')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase3",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "StockItemID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "StockItemName",
						"type": "nvarchar"
					},
					{
						"name": "SupplierID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "ColorID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "UnitPackageID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "OuterPackageID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Brand",
						"type": "nvarchar"
					},
					{
						"name": "Size",
						"type": "nvarchar"
					},
					{
						"name": "LeadTimeDays",
						"type": "int",
						"precision": 10
					},
					{
						"name": "QuantityPerOuter",
						"type": "int",
						"precision": 10
					},
					{
						"name": "IsChillerStock",
						"type": "bit"
					},
					{
						"name": "Barcode",
						"type": "nvarchar"
					},
					{
						"name": "TaxRate",
						"type": "decimal",
						"precision": 18,
						"scale": 3
					},
					{
						"name": "UnitPrice",
						"type": "decimal",
						"precision": 18,
						"scale": 2
					},
					{
						"name": "RecommendedRetailPrice",
						"type": "decimal",
						"precision": 18,
						"scale": 2
					},
					{
						"name": "TypicalWeightPerUnit",
						"type": "decimal",
						"precision": 18,
						"scale": 3
					},
					{
						"name": "MarketingComments",
						"type": "nvarchar"
					},
					{
						"name": "InternalComments",
						"type": "nvarchar"
					},
					{
						"name": "Photo",
						"type": "varbinary"
					},
					{
						"name": "CustomFields",
						"type": "nvarchar"
					},
					{
						"name": "Tags",
						"type": "nvarchar"
					},
					{
						"name": "SearchDetails",
						"type": "nvarchar"
					},
					{
						"name": "LastEditedBy",
						"type": "int",
						"precision": 10
					},
					{
						"name": "ValidFrom",
						"type": "datetime2",
						"scale": 7
					},
					{
						"name": "ValidTo",
						"type": "datetime2",
						"scale": 7
					}
				],
				"typeProperties": {
					"schema": "Warehouse",
					"table": "StockItems"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/wwwODS')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileSystem": "adf"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/WaterMarkTable')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDB",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "TableName",
						"type": "varchar"
					},
					{
						"name": "WatermarkValue",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "watermarktable"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Datascr')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDB",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/BlbStore')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "@concat('Incremental -', pipeline().RunId,'.txt')",
							"type": "Expression"
						},
						"folderPath": "incrementalcopy",
						"container": "adfpl"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/1_CopyPipeline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy_b28",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [
							{
								"name": "Source",
								"value": "Sales.Orders"
							},
							{
								"name": "Destination",
								"value": "adf//pl_copy"
							}
						],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"partitionOption": "None"
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"validateDataConsistency": false
						},
						"inputs": [
							{
								"referenceName": "SourceDataset_b28",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DestinationDataset_b28",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/2_IncrementallyLoadData1')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"modifiedDatetimeStart": {
										"value": "@adddays(utcnow(), -2)",
										"type": "Expression"
									},
									"modifiedDatetimeEnd": {
										"value": "@utcnow()",
										"type": "Expression"
									},
									"wildcardFolderPath": "adf",
									"wildcardFileName": "*.csv",
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DelimitedText3",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "output",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DimEmployeeLoader2')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "EmployeeFiles",
								"type": "DatasetReference"
							},
							"name": "Employees1",
							"description": " Source employees file, changes every day"
						},
						{
							"dataset": {
								"referenceName": "DimEmp",
								"type": "DatasetReference"
							},
							"name": "DimEmployees",
							"description": "Current rows in DimEmployees DW table"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DimEmp",
								"type": "DatasetReference"
							},
							"name": "sinkNew",
							"description": " "
						},
						{
							"dataset": {
								"referenceName": "DimEmp",
								"type": "DatasetReference"
							},
							"name": "sinkUpdates",
							"description": " "
						},
						{
							"dataset": {
								"referenceName": "DimEmp",
								"type": "DatasetReference"
							},
							"name": "sinkInactive",
							"description": " Age out old rows"
						}
					],
					"transformations": [
						{
							"name": "TypeConversions"
						},
						{
							"name": "TypeConversionsAndSetAttrs"
						},
						{
							"name": "LookupIDs"
						},
						{
							"name": "ConditionalSplit1"
						},
						{
							"name": "checkForChanges"
						},
						{
							"name": "SetAttrsForNew"
						},
						{
							"name": "SetAttrsInactive",
							"description": "make iscurrent 0"
						},
						{
							"name": "SetAttrsUpdate"
						},
						{
							"name": "NormNames"
						},
						{
							"name": "InactiveFields"
						},
						{
							"name": "AlterRow1"
						},
						{
							"name": "NullFilter",
							"description": "Filter out NULLs from source file"
						},
						{
							"name": "NameNorm2"
						}
					],
					"scriptLines": [
						"source(output(",
						"          EmpID as string,",
						"          Region as string,",
						"          Status as string,",
						"          Function as string,",
						"          Level as string,",
						"          Role as string,",
						"          StartDate as string,",
						"          EndDate as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     purgeFiles: true,",
						"     wildcardPaths:['SampleData/Emps/today/*.csv']) ~> Employees1",
						"source(output(",
						"          EmpID as integer,",
						"          surrogatekey as string,",
						"          Region as string,",
						"          Status as string,",
						"          EmpFunction as string,",
						"          Level as string,",
						"          Role as string,",
						"          StartDate as date,",
						"          EndDate as date,",
						"          iscurrent as integer,",
						"          processtime as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> DimEmployees",
						"DimEmployees derive(EmpID = toInteger(EmpID)) ~> TypeConversions",
						"NullFilter derive(EmpID = toInteger(EmpID),",
						"          StartDate = toDate(StartDate,'MM/dd/yyyy'),",
						"          EndDate = toDate(EndDate,'MM/dd/yyyy'),",
						"          processtime = currentTimestamp()) ~> TypeConversionsAndSetAttrs",
						"TypeConversionsAndSetAttrs, TypeConversions lookup(TypeConversionsAndSetAttrs@EmpID == TypeConversions@EmpID,",
						"     multiple: true,",
						"     broadcast: 'auto')~> LookupIDs",
						"NormNames split(isNull(iscurrent),",
						"     disjoint: false) ~> ConditionalSplit1@(NewRow, CheckForUpdates)",
						"NameNorm2, TypeConversions exists(NameNorm2@EmpID == TypeConversions@EmpID,",
						"     negate:false,",
						"     broadcast: 'auto')~> checkForChanges",
						"ConditionalSplit1@NewRow derive(iscurrent = 1,",
						"          surrogatekey = toString(crc32(EmpID,EmpFunction))) ~> SetAttrsForNew",
						"checkForChanges derive(iscurrent = 0) ~> SetAttrsInactive",
						"checkForChanges derive(iscurrent = 1) ~> SetAttrsUpdate",
						"LookupIDs select(mapColumn(",
						"          EmpID = TypeConversionsAndSetAttrs@EmpID,",
						"          Region = Employees1@Region,",
						"          Status = Employees1@Status,",
						"          Level = Employees1@Level,",
						"          Role = Employees1@Role,",
						"          StartDate = TypeConversionsAndSetAttrs@StartDate,",
						"          EndDate = TypeConversionsAndSetAttrs@EndDate,",
						"          EmpFunction = Function,",
						"          iscurrent,",
						"          processtime = TypeConversionsAndSetAttrs@processtime,",
						"          surrogatekey",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> NormNames",
						"SetAttrsInactive select(mapColumn(",
						"          EmpID,",
						"          Status,",
						"          EndDate,",
						"          iscurrent,",
						"          processtime",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> InactiveFields",
						"InactiveFields alterRow(updateIf(true())) ~> AlterRow1",
						"Employees1 filter(!isNull(EmpID)) ~> NullFilter",
						"ConditionalSplit1@CheckForUpdates select(mapColumn(",
						"          EmpID,",
						"          Region,",
						"          Status,",
						"          Level,",
						"          Role,",
						"          StartDate,",
						"          EndDate,",
						"          EmpFunction,",
						"          iscurrent,",
						"          processtime,",
						"          surrogatekey",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> NameNorm2",
						"SetAttrsForNew sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          EmpID as integer,",
						"          surrogatekey as string,",
						"          Region as string,",
						"          Status as string,",
						"          EmpFunction as string,",
						"          Level as string,",
						"          Role as string,",
						"          StartDate as date,",
						"          EndDate as date,",
						"          iscurrent as integer,",
						"          processtime as timestamp",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     batchSize: 50,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     partitionBy('roundRobin', 4)) ~> sinkNew",
						"SetAttrsUpdate sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          EmpID as integer,",
						"          surrogatekey as string,",
						"          Region as string,",
						"          Status as string,",
						"          EmpFunction as string,",
						"          Level as string,",
						"          Role as string,",
						"          StartDate as date,",
						"          EndDate as date,",
						"          iscurrent as integer,",
						"          processtime as timestamp",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     batchSize: 50,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     partitionBy('roundRobin', 4)) ~> sinkUpdates",
						"AlterRow1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          EmpID as integer,",
						"          surrogatekey as string,",
						"          Region as string,",
						"          Status as string,",
						"          EmpFunction as string,",
						"          Level as string,",
						"          Role as string,",
						"          StartDate as date,",
						"          EndDate as date,",
						"          iscurrent as integer,",
						"          processtime as timestamp",
						"     ),",
						"     deletable:false,",
						"     insertable:false,",
						"     updateable:true,",
						"     upsertable:false,",
						"     keys:['EmpID'],",
						"     format: 'table',",
						"     batchSize: 50,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          EmpID,",
						"          EndDate,",
						"          iscurrent,",
						"          processtime",
						"     ),",
						"     partitionBy('roundRobin', 4)) ~> sinkInactive"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/SCDType2')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "wwiorders",
								"type": "DatasetReference"
							},
							"name": "WWIOrders"
						},
						{
							"dataset": {
								"referenceName": "FactOrder",
								"type": "DatasetReference"
							},
							"name": "OrderTable"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "FactOrder",
								"type": "DatasetReference"
							},
							"name": "SinkOrders"
						},
						{
							"dataset": {
								"referenceName": "FactOrder",
								"type": "DatasetReference"
							},
							"name": "sinkUpdate"
						}
					],
					"transformations": [
						{
							"name": "NotNull"
						},
						{
							"name": "AddingIsActive"
						},
						{
							"name": "lookup1"
						},
						{
							"name": "IDnotNull"
						},
						{
							"name": "select2"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "alterRow1"
						},
						{
							"name": "select3"
						}
					],
					"scriptLines": [
						"source(output(",
						"          OrderID as integer,",
						"          CustomerID as integer,",
						"          SalespersonPersonID as integer,",
						"          PickedByPersonID as integer,",
						"          ContactPersonID as integer,",
						"          BackorderOrderID as integer,",
						"          OrderDate as date,",
						"          ExpectedDeliveryDate as date,",
						"          CustomerPurchaseOrderNumber as string,",
						"          IsUndersupplyBackordered as boolean,",
						"          Comments as string,",
						"          DeliveryInstructions as string,",
						"          InternalComments as string,",
						"          PickingCompletedWhen as timestamp,",
						"          LastEditedBy as integer,",
						"          LastEditedWhen as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> WWIOrders",
						"source(output(",
						"          {Order Key} as long,",
						"          {City Key} as integer,",
						"          {Customer Key} as integer,",
						"          {Stock Item Key} as integer,",
						"          {Order Date Key} as date,",
						"          {Picked Date Key} as date,",
						"          {Salesperson Key} as integer,",
						"          {Picker Key} as integer,",
						"          {WWI Order ID} as integer,",
						"          {WWI Backorder ID} as integer,",
						"          Description as string,",
						"          Package as string,",
						"          Quantity as integer,",
						"          {Unit Price} as decimal(18,2),",
						"          {Tax Rate} as decimal(18,3),",
						"          {Total Excluding Tax} as decimal(18,2),",
						"          {Tax Amount} as decimal(18,2),",
						"          {Total Including Tax} as decimal(18,2),",
						"          {Lineage Key} as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> OrderTable",
						"WWIOrders filter(!isNull(OrderID)) ~> NotNull",
						"NotNull derive({Lineage Key} = 9) ~> AddingIsActive",
						"WWIOrders, OrderTable lookup(OrderID == {WWI Order ID},",
						"     multiple: true,",
						"     broadcast: 'auto')~> lookup1",
						"lookup1 filter(!isNull({WWI Order ID})) ~> IDnotNull",
						"IDnotNull select(mapColumn(",
						"          {Order Key},",
						"          {Customer Key},",
						"          {Order Date Key},",
						"          {Picked Date Key},",
						"          {Salesperson Key},",
						"          {Picker Key},",
						"          {WWI Order ID},",
						"          {WWI Backorder ID},",
						"          {Lineage Key}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select2",
						"select2 derive({Lineage Key} = 0) ~> derivedColumn1",
						"derivedColumn1 alterRow(updateIf(9==9)) ~> alterRow1",
						"OrderTable select(mapColumn(",
						"          {Order Key},",
						"          {Customer Key},",
						"          {Order Date Key},",
						"          {Picked Date Key},",
						"          {Salesperson Key},",
						"          {Picker Key},",
						"          {WWI Order ID},",
						"          {SQL_WWI Backorder ID} = {WWI Backorder ID},",
						"          {SQL_Lineage Key} = {Lineage Key}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select3",
						"AddingIsActive sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          {Order Key} as long,",
						"          {Customer Key} as integer,",
						"          {Stock Item Key} as integer,",
						"          {Order Date Key} as date,",
						"          {Picked Date Key} as date,",
						"          {Salesperson Key} as integer,",
						"          {Picker Key} as integer,",
						"          {WWI Order ID} as integer,",
						"          {WWI Backorder ID} as integer,",
						"          Description as string,",
						"          Package as string,",
						"          Quantity as integer,",
						"          {Unit Price} as decimal(18,2),",
						"          {Tax Rate} as decimal(18,3),",
						"          {Total Excluding Tax} as decimal(18,2),",
						"          {Tax Amount} as decimal(18,2),",
						"          {Total Including Tax} as decimal(18,2),",
						"          {Lineage Key} as integer",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     saveOrder: 2,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          {Customer Key} = CustomerID,",
						"          {Order Date Key} = OrderDate,",
						"          {Picked Date Key} = PickingCompletedWhen,",
						"          {Salesperson Key} = SalespersonPersonID,",
						"          {Picker Key} = PickedByPersonID,",
						"          {WWI Order ID} = OrderID,",
						"          {WWI Backorder ID} = BackorderOrderID,",
						"          {Lineage Key}",
						"     )) ~> SinkOrders",
						"alterRow1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          {Order Key} as long,",
						"          {Customer Key} as integer,",
						"          {Stock Item Key} as integer,",
						"          {Order Date Key} as date,",
						"          {Picked Date Key} as date,",
						"          {Salesperson Key} as integer,",
						"          {Picker Key} as integer,",
						"          {WWI Order ID} as integer,",
						"          {WWI Backorder ID} as integer,",
						"          Description as string,",
						"          Package as string,",
						"          Quantity as integer,",
						"          {Unit Price} as decimal(18,2),",
						"          {Tax Rate} as decimal(18,3),",
						"          {Total Excluding Tax} as decimal(18,2),",
						"          {Tax Amount} as decimal(18,2),",
						"          {Total Including Tax} as decimal(18,2),",
						"          {Lineage Key} as integer",
						"     ),",
						"     deletable:false,",
						"     insertable:false,",
						"     updateable:true,",
						"     upsertable:false,",
						"     keys:['Order Key'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     saveOrder: 1,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          {Order Key},",
						"          {Customer Key},",
						"          {Order Date Key},",
						"          {Picked Date Key},",
						"          {Salesperson Key},",
						"          {Picker Key},",
						"          {WWI Order ID},",
						"          {WWI Backorder ID},",
						"          {Lineage Key}",
						"     )) ~> sinkUpdate"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/wwiorders')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/2_IncrementallyLoadData2')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "LkpOldWatermark",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "WaterMarkTable",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "LkpNewWaterMark",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "SELECT max(LastModifytime) as NewWatermarkValue from data_src",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "Datascr",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "LkpNewWaterMark",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "LkpOldWatermark",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "select * from data_scr where LastModifytime > '@{activity('LkpOldWatermark').output.firstRow.WatermarkValue}' and LastModifytime <= '@{activity('LkpNewWaterMark').output.firstRow.NewWatermarkvalue}'",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "Datascr",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "BlbStore",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "UpdateWatermark",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Copy data1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[usp_write_watermark]",
							"storedProcedureParameters": {
								"LastModifiedTime": {
									"value": "@(activity('LkpNewWatermark').output.firstrow.NewWatermarkvalue)",
									"type": "Datetime"
								},
								"TableName": {
									"value": "@(activity('LkpOldWatermark').output.firstrow.TableName)",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "AzureSqlDB",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/WaterMarkTable')]",
				"[concat(variables('factoryId'), '/datasets/Datascr')]",
				"[concat(variables('factoryId'), '/datasets/BlbStore')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/3_SCDType2')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "SCDType2",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "SCDType2",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"WWIOrders": {},
									"OrderTable": {},
									"SinkOrders": {},
									"sinkUpdate": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/SCDType2')]"
			]
		}
	]
}