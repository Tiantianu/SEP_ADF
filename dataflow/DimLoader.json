{
	"name": "DimLoader",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "Input_customer",
						"type": "DatasetReference"
					},
					"name": "Input",
					"description": " Source employees file, changes every day"
				},
				{
					"dataset": {
						"referenceName": "Dim_customer",
						"type": "DatasetReference"
					},
					"name": "DimEmployees",
					"description": "Current rows in DimEmployees DW table"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "DimEmp1",
						"type": "DatasetReference"
					},
					"name": "sinkNew",
					"description": " "
				},
				{
					"dataset": {
						"referenceName": "Dim_customer",
						"type": "DatasetReference"
					},
					"name": "sinkUpdates",
					"description": " "
				}
			],
			"transformations": [
				{
					"name": "LookupIDs"
				},
				{
					"name": "ConditionalSplit1"
				},
				{
					"name": "checkForChanges"
				},
				{
					"name": "SetAttrsForNew"
				},
				{
					"name": "SetAttrsInactive",
					"description": "make iscurrent 0"
				},
				{
					"name": "SetAttrsUpdate"
				},
				{
					"name": "NormNames"
				},
				{
					"name": "InactiveFields"
				},
				{
					"name": "AlterRow1"
				},
				{
					"name": "NullFilter",
					"description": "Filter out NULLs from source file"
				},
				{
					"name": "NameNorm2"
				},
				{
					"name": "select1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          {Customer Key} as integer,",
				"          {WWI Customer ID} as integer,",
				"          Customer as string,",
				"          {Bill To Customer} as string,",
				"          Category as string,",
				"          {Buying Group} as string,",
				"          {Primary Contact} as string,",
				"          {Postal Code} as string,",
				"          {Valid From} as timestamp,",
				"          {Valid To} as timestamp,",
				"          {Lineage Key} as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     purgeFiles: true,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table',",
				"     wildcardPaths:['SampleData/Emps/today/*.csv']) ~> Input",
				"source(output(",
				"          {Customer Key} as integer,",
				"          {WWI Customer ID} as integer,",
				"          Customer as string,",
				"          Category as string,",
				"          {Buying Group} as string,",
				"          {Primary Contact} as string,",
				"          {Postal Code} as string,",
				"          {Valid From} as timestamp,",
				"          {Valid To} as timestamp,",
				"          {Lineage Key} as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> DimEmployees",
				"NullFilter, select1 lookup(Input@{WWI Customer ID} == select1@{WWI Customer ID},",
				"     multiple: true,",
				"     broadcast: 'auto')~> LookupIDs",
				"NormNames split({Lineage Key}==0,",
				"     disjoint: false) ~> ConditionalSplit1@(NewRow, CheckForUpdates)",
				"NameNorm2, select1 exists(NameNorm2@{Customer Key}==select1@{Customer Key},",
				"     negate:false,",
				"     broadcast: 'auto')~> checkForChanges",
				"ConditionalSplit1@NewRow derive({Lineage Key} = 2) ~> SetAttrsForNew",
				"checkForChanges derive({Lineage Key} = 0) ~> SetAttrsInactive",
				"checkForChanges derive({Lineage Key} = 2) ~> SetAttrsUpdate",
				"LookupIDs select(mapColumn(",
				"          {Customer Key} = Input@{Customer Key},",
				"          {WWI Customer ID} = Input@{WWI Customer ID},",
				"          Customer = Input@Customer,",
				"          {Valid From} = Input@{Valid From},",
				"          {Valid To} = Input@{Valid To},",
				"          {Lineage Key} = Input@{Lineage Key}",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> NormNames",
				"SetAttrsInactive select(mapColumn(",
				"          {Customer Key},",
				"          {WWI Customer ID},",
				"          Customer,",
				"          {Valid From},",
				"          {Valid To},",
				"          {Lineage Key}",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: false) ~> InactiveFields",
				"InactiveFields alterRow(updateIf(true())) ~> AlterRow1",
				"Input filter(!isNull({WWI Customer ID})) ~> NullFilter",
				"ConditionalSplit1@CheckForUpdates select(mapColumn(",
				"          {Customer Key},",
				"          {WWI Customer ID},",
				"          Customer,",
				"          {Valid From},",
				"          {Valid To},",
				"          {Lineage Key}",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: false) ~> NameNorm2",
				"DimEmployees select(mapColumn(",
				"          {Customer Key},",
				"          {WWI Customer ID},",
				"          Customer,",
				"          {Valid From},",
				"          {Valid To},",
				"          {Lineage Key}",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select1",
				"SetAttrsForNew sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          EmpID as integer,",
				"          surrogatekey as string,",
				"          Region as string,",
				"          Status as string,",
				"          EmpFunction as string,",
				"          Level as string,",
				"          Role as string,",
				"          StartDate as date,",
				"          EndDate as date,",
				"          iscurrent as integer,",
				"          processtime as timestamp",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     batchSize: 50,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     partitionBy('roundRobin', 4)) ~> sinkNew",
				"SetAttrsUpdate sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          {Customer Key} as integer,",
				"          {WWI Customer ID} as integer,",
				"          Customer as string,",
				"          Category as string,",
				"          {Buying Group} as string,",
				"          {Primary Contact} as string,",
				"          {Postal Code} as string,",
				"          {Valid From} as timestamp,",
				"          {Valid To} as timestamp,",
				"          {Lineage Key} as integer",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     batchSize: 50,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          {Customer Key},",
				"          {WWI Customer ID},",
				"          Customer,",
				"          {Valid From},",
				"          {Valid To},",
				"          {Lineage Key}",
				"     ),",
				"     partitionBy('roundRobin', 4)) ~> sinkUpdates"
			]
		}
	}
}