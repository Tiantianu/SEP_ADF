{
	"name": "SCDType2",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "wwiorders",
						"type": "DatasetReference"
					},
					"name": "WWIOrders"
				},
				{
					"dataset": {
						"referenceName": "FactOrder",
						"type": "DatasetReference"
					},
					"name": "OrderTable"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "FactOrder",
						"type": "DatasetReference"
					},
					"name": "SinkOrders"
				},
				{
					"dataset": {
						"referenceName": "FactOrder",
						"type": "DatasetReference"
					},
					"name": "sinkUpdate"
				}
			],
			"transformations": [
				{
					"name": "NotNull"
				},
				{
					"name": "AddingIsActive"
				},
				{
					"name": "lookup1"
				},
				{
					"name": "IDnotNull"
				},
				{
					"name": "select2"
				},
				{
					"name": "derivedColumn1"
				},
				{
					"name": "alterRow1"
				},
				{
					"name": "select3"
				}
			],
			"scriptLines": [
				"source(output(",
				"          OrderID as integer,",
				"          CustomerID as integer,",
				"          SalespersonPersonID as integer,",
				"          PickedByPersonID as integer,",
				"          ContactPersonID as integer,",
				"          BackorderOrderID as integer,",
				"          OrderDate as date,",
				"          ExpectedDeliveryDate as date,",
				"          CustomerPurchaseOrderNumber as string,",
				"          IsUndersupplyBackordered as boolean,",
				"          Comments as string,",
				"          DeliveryInstructions as string,",
				"          InternalComments as string,",
				"          PickingCompletedWhen as timestamp,",
				"          LastEditedBy as integer,",
				"          LastEditedWhen as timestamp",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> WWIOrders",
				"source(output(",
				"          {Order Key} as long,",
				"          {City Key} as integer,",
				"          {Customer Key} as integer,",
				"          {Stock Item Key} as integer,",
				"          {Order Date Key} as date,",
				"          {Picked Date Key} as date,",
				"          {Salesperson Key} as integer,",
				"          {Picker Key} as integer,",
				"          {WWI Order ID} as integer,",
				"          {WWI Backorder ID} as integer,",
				"          Description as string,",
				"          Package as string,",
				"          Quantity as integer,",
				"          {Unit Price} as decimal(18,2),",
				"          {Tax Rate} as decimal(18,3),",
				"          {Total Excluding Tax} as decimal(18,2),",
				"          {Tax Amount} as decimal(18,2),",
				"          {Total Including Tax} as decimal(18,2),",
				"          {Lineage Key} as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> OrderTable",
				"WWIOrders filter(!isNull(OrderID)) ~> NotNull",
				"NotNull derive({Lineage Key} = 9) ~> AddingIsActive",
				"WWIOrders, OrderTable lookup(OrderID == {WWI Order ID},",
				"     multiple: true,",
				"     broadcast: 'auto')~> lookup1",
				"lookup1 filter(!isNull({WWI Order ID})) ~> IDnotNull",
				"IDnotNull select(mapColumn(",
				"          {Order Key},",
				"          {Customer Key},",
				"          {Order Date Key},",
				"          {Picked Date Key},",
				"          {Salesperson Key},",
				"          {Picker Key},",
				"          {WWI Order ID},",
				"          {WWI Backorder ID},",
				"          {Lineage Key}",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select2",
				"select2 derive({Lineage Key} = 0) ~> derivedColumn1",
				"derivedColumn1 alterRow(updateIf(9 == 9)) ~> alterRow1",
				"OrderTable select(mapColumn(",
				"          {SQL_Order Key} = {Order Key},",
				"          {SQL_Customer Key} = {Customer Key},",
				"          {SQL_Order Date Key} = {Order Date Key},",
				"          {SQL_Picked Date Key} = {Picked Date Key},",
				"          {SQL_Salesperson Key} = {Salesperson Key},",
				"          {SQL_Picker Key} = {Picker Key},",
				"          {SQL_WWI Order ID} = {WWI Order ID},",
				"          {SQL_WWI Backorder ID} = {WWI Backorder ID},",
				"          {SQL_Lineage Key} = {Lineage Key}",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select3",
				"AddingIsActive sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          {Order Key} as long,",
				"          {City Key} as integer,",
				"          {Customer Key} as integer,",
				"          {Stock Item Key} as integer,",
				"          {Order Date Key} as date,",
				"          {Picked Date Key} as date,",
				"          {Salesperson Key} as integer,",
				"          {Picker Key} as integer,",
				"          {WWI Order ID} as integer,",
				"          {WWI Backorder ID} as integer,",
				"          Description as string,",
				"          Package as string,",
				"          Quantity as integer,",
				"          {Unit Price} as decimal(18,2),",
				"          {Tax Rate} as decimal(18,3),",
				"          {Total Excluding Tax} as decimal(18,2),",
				"          {Tax Amount} as decimal(18,2),",
				"          {Total Including Tax} as decimal(18,2),",
				"          {Lineage Key} as integer",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     saveOrder: 2,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          {Customer Key} = CustomerID,",
				"          {Order Date Key} = OrderDate,",
				"          {Picked Date Key} = PickingCompletedWhen,",
				"          {Salesperson Key} = SalespersonPersonID,",
				"          {Picker Key} = PickedByPersonID,",
				"          {WWI Order ID} = OrderID,",
				"          {WWI Backorder ID} = BackorderOrderID,",
				"          {Lineage Key}",
				"     )) ~> SinkOrders",
				"alterRow1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          {Order Key} as long,",
				"          {City Key} as integer,",
				"          {Customer Key} as integer,",
				"          {Stock Item Key} as integer,",
				"          {Order Date Key} as date,",
				"          {Picked Date Key} as date,",
				"          {Salesperson Key} as integer,",
				"          {Picker Key} as integer,",
				"          {WWI Order ID} as integer,",
				"          {WWI Backorder ID} as integer,",
				"          Description as string,",
				"          Package as string,",
				"          Quantity as integer,",
				"          {Unit Price} as decimal(18,2),",
				"          {Tax Rate} as decimal(18,3),",
				"          {Total Excluding Tax} as decimal(18,2),",
				"          {Tax Amount} as decimal(18,2),",
				"          {Total Including Tax} as decimal(18,2),",
				"          {Lineage Key} as integer",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     saveOrder: 1,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          {Order Key},",
				"          {Customer Key},",
				"          {Order Date Key},",
				"          {Picked Date Key},",
				"          {Salesperson Key},",
				"          {Picker Key},",
				"          {WWI Order ID},",
				"          {WWI Backorder ID},",
				"          {Lineage Key}",
				"     )) ~> sinkUpdate"
			]
		}
	}
}