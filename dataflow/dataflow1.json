{
	"name": "dataflow1",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"name": "UpdatedCustomer"
				},
				{
					"name": "DimCustomer",
					"description": "Import data from DimCustomer"
				}
			],
			"sinks": [
				{
					"name": "FinalSCDtype2"
				}
			],
			"transformations": [
				{
					"name": "AddHashInput"
				},
				{
					"name": "FilterForActive"
				},
				{
					"name": "AddHashExiting",
					"description": "Creating/updating Id_hash, customer_hash"
				},
				{
					"name": "NewandUpdatedRow"
				},
				{
					"name": "AddKey1"
				},
				{
					"name": "JoinWithMaxSurrogateKey"
				},
				{
					"name": "AddingDimensionColumn"
				},
				{
					"name": "exists1"
				},
				{
					"name": "UpdateExist1"
				},
				{
					"name": "union1"
				},
				{
					"name": "DropUnwantedColumn"
				},
				{
					"name": "DropUnwanted2"
				},
				{
					"name": "RemoveColumns1",
					"description": "Autogenerated by data preview actions"
				},
				{
					"name": "AlterRow1"
				}
			],
			"scriptLines": [
				"parameters{",
				"     PrimaryKey as string ('WWI Customer ID'),",
				"     Column as string ('Customer Key,CUstomer,Bill To Customer,Category,Buying Group,Primary Contact,Postal Code,Valid From,Valid To,Lineage')",
				"}",
				"source(output(",
				"          {Customer Key} as short,",
				"          {WWI Customer ID} as short,",
				"          CUstomer as string,",
				"          {Bill To Customer} as string,",
				"          Category as string,",
				"          {Buying Group} as string,",
				"          {Primary Contact} as string,",
				"          {Postal Code} as integer,",
				"          {Valid From} as string,",
				"          {Valid To} as string,",
				"          Lineage as short",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     limit: 10,",
				"     partitionBy('hash', 1)) ~> UpdatedCustomer",
				"source(output(",
				"          {Customer Key} as integer,",
				"          {WWI Customer ID} as integer,",
				"          Customer as string,",
				"          {Bill To Customer} as string,",
				"          Category as string,",
				"          {Buying Group} as string,",
				"          {Primary Contact} as string,",
				"          {Postal Code} as string,",
				"          {Valid From} as timestamp,",
				"          {Valid To} as timestamp,",
				"          {Lineage Key} as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     inferDriftedColumnTypes: true) ~> DimCustomer",
				"UpdatedCustomer derive(Id_hash = md5(byName($PrimaryKey)),",
				"          column_hash = md5(byNames(split($Column, ',')))) ~> AddHashInput",
				"DimCustomer filter(toInteger(byName('Lineage Key'))==2) ~> FilterForActive",
				"FilterForActive derive(Id_hash = md5(byNames(split($PrimaryKey,','))),",
				"          column_hash = md5(byNames(split($Column,','))),",
				"     partitionBy('hash', 1)) ~> AddHashExiting",
				"AddHashInput, AddHashExiting exists(AddHashInput@Id_hash == AddHashExiting@Id_hash",
				"     && AddHashInput@column_hash == AddHashExiting@column_hash,",
				"     negate:true,",
				"     broadcast: 'auto')~> NewandUpdatedRow",
				"NewandUpdatedRow keyGenerate(output(Key as long),",
				"     startAt: 1L,",
				"     stepValue: 1L) ~> AddKey1",
				"AddKey1, AddHashExiting join(UpdatedCustomer@{Customer Key} == DimCustomer@{Customer Key},",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> JoinWithMaxSurrogateKey",
				"JoinWithMaxSurrogateKey derive(Active = 1,",
				"          {Active Start Time} = currentUTC(),",
				"     partitionBy('hash', 1)) ~> AddingDimensionColumn",
				"AddHashExiting, NewandUpdatedRow exists(DimCustomer@Customer == UpdatedCustomer@CUstomer,",
				"     negate:false,",
				"     broadcast: 'auto')~> exists1",
				"exists1 derive(Active = 0,",
				"          ActiveEndTime = currentUTC()) ~> UpdateExist1",
				"DropUnwantedColumn, UpdateExist1 union(byName: true)~> union1",
				"AddingDimensionColumn select(mapColumn(",
				"          {Customer Key} = UpdatedCustomer@{Customer Key},",
				"          {WWI Customer ID} = UpdatedCustomer@{WWI Customer ID},",
				"          CUstomer = UpdatedCustomer@CUstomer,",
				"          {Customer Key} = DimCustomer@{Customer Key},",
				"          Active,",
				"          {Active Start Time}",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> DropUnwantedColumn",
				"UpdateExist1 select(mapColumn(",
				"          {Customer Key},",
				"          {WWI Customer ID},",
				"          Active,",
				"          ActiveEndTime",
				"     ),",
				"     partitionBy('hash', 1),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> DropUnwanted2",
				"union1 select(mapColumn(",
				"          {Customer Key},",
				"          {WWI Customer ID},",
				"          Active,",
				"          {Active Start Time},",
				"          ActiveEndTime,",
				"          DimCUstomer = union1@CUstomer",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> RemoveColumns1",
				"RemoveColumns1 alterRow(insertIf(true())) ~> AlterRow1",
				"AlterRow1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     format: 'table') ~> FinalSCDtype2"
			]
		}
	}
}