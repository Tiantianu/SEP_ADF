{
	"name": "SCD_T2",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "wwicustomer",
						"type": "DatasetReference"
					},
					"name": "WWICustomer"
				},
				{
					"dataset": {
						"referenceName": "dw_customer",
						"type": "DatasetReference"
					},
					"name": "DimCustomer",
					"description": "Current rows in DimEmployees DW table"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "dw_customer",
						"type": "DatasetReference"
					},
					"name": "sinkNew",
					"description": " "
				},
				{
					"dataset": {
						"referenceName": "dw_customer",
						"type": "DatasetReference"
					},
					"name": "sinkUpdates",
					"description": " "
				},
				{
					"dataset": {
						"referenceName": "dw_customer",
						"type": "DatasetReference"
					},
					"name": "sinkInactive",
					"description": " Age out old rows"
				}
			],
			"transformations": [
				{
					"name": "TypeConversionsAndSetAttrs"
				},
				{
					"name": "LookupIDs"
				},
				{
					"name": "ConditionalSplit1"
				},
				{
					"name": "checkForChanges"
				},
				{
					"name": "SetAttrsForNew"
				},
				{
					"name": "SetAttrsInactive"
				},
				{
					"name": "SetAttrsUpdate"
				},
				{
					"name": "NormNames"
				},
				{
					"name": "InactiveFields"
				},
				{
					"name": "AlterRow1"
				},
				{
					"name": "NullFilter",
					"description": "Filter out NULLs from source file"
				},
				{
					"name": "NameNorm2"
				},
				{
					"name": "alterRow2"
				}
			],
			"scriptLines": [
				"source(output(",
				"          CustomerID as integer,",
				"          CustomerName as string,",
				"          BillToCustomerID as integer,",
				"          CustomerCategoryID as integer,",
				"          BuyingGroupID as integer,",
				"          PrimaryContactPersonID as integer,",
				"          AlternateContactPersonID as integer,",
				"          DeliveryMethodID as integer,",
				"          DeliveryCityID as integer,",
				"          PostalCityID as integer,",
				"          CreditLimit as decimal(18,2),",
				"          AccountOpenedDate as date,",
				"          StandardDiscountPercentage as decimal(18,3),",
				"          IsStatementSent as boolean,",
				"          IsOnCreditHold as boolean,",
				"          PaymentDays as integer,",
				"          PhoneNumber as string,",
				"          FaxNumber as string,",
				"          DeliveryRun as string,",
				"          RunPosition as string,",
				"          WebsiteURL as string,",
				"          DeliveryAddressLine1 as string,",
				"          DeliveryAddressLine2 as string,",
				"          DeliveryPostalCode as string,",
				"          DeliveryLocation as binary,",
				"          PostalAddressLine1 as string,",
				"          PostalAddressLine2 as string,",
				"          PostalPostalCode as string,",
				"          LastEditedBy as integer,",
				"          ValidFrom as timestamp,",
				"          ValidTo as timestamp",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     purgeFiles: true,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table',",
				"     wildcardPaths:['SampleData/Emps/today/*.csv']) ~> WWICustomer",
				"source(output(",
				"          {Customer Key} as integer,",
				"          {WWI Customer ID} as integer,",
				"          Customer as string,",
				"          {Bill To Customer} as string,",
				"          Category as string,",
				"          {Buying Group} as string,",
				"          {Primary Contact} as string,",
				"          {Postal Code} as string,",
				"          {Valid From} as timestamp,",
				"          {Valid To} as timestamp,",
				"          {Lineage Key} as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> DimCustomer",
				"NullFilter derive(CustomerID = toInteger(CustomerID),",
				"          processtime = currentTimestamp()) ~> TypeConversionsAndSetAttrs",
				"TypeConversionsAndSetAttrs, DimCustomer lookup(CustomerID == {WWI Customer ID},",
				"     multiple: true,",
				"     broadcast: 'auto')~> LookupIDs",
				"NormNames split({Lineage Key} == 0,",
				"     disjoint: false) ~> ConditionalSplit1@(NewRow, CheckForUpdates)",
				"NameNorm2, DimCustomer exists({WWI Customer ID} == {CustomerID},",
				"     negate:false,",
				"     broadcast: 'auto')~> checkForChanges",
				"ConditionalSplit1@NewRow derive({Lineage Key} = 2) ~> SetAttrsForNew",
				"checkForChanges derive({Lineage Key} = 0) ~> SetAttrsInactive",
				"checkForChanges derive({Lineage Key} = 2) ~> SetAttrsUpdate",
				"LookupIDs select(mapColumn(",
				"          CustomerID,",
				"          ValidFrom,",
				"          ValidTo,",
				"          processtime,",
				"          {Customer Key},",
				"          Customer,",
				"          {Bill To Customer},",
				"          Category,",
				"          {Buying Group},",
				"          {Primary Contact},",
				"          {Postal Code},",
				"          {Lineage Key}",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: false) ~> NormNames",
				"SetAttrsInactive select(mapColumn(",
				"          CustomerID,",
				"          ValidFrom,",
				"          ValidTo,",
				"          processtime,",
				"          {Customer Key},",
				"          Customer,",
				"          {Bill To Customer},",
				"          Category,",
				"          {Buying Group},",
				"          {Primary Contact},",
				"          {Postal Code},",
				"          {Lineage Key}",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: false) ~> InactiveFields",
				"InactiveFields alterRow(updateIf(true())) ~> AlterRow1",
				"WWICustomer filter(!isNull(CustomerID)) ~> NullFilter",
				"ConditionalSplit1@CheckForUpdates select(mapColumn(",
				"          CustomerID,",
				"          ValidFrom,",
				"          ValidTo,",
				"          processtime,",
				"          {Customer Key},",
				"          Customer,",
				"          {Bill To Customer},",
				"          Category,",
				"          {Buying Group},",
				"          {Primary Contact},",
				"          {Postal Code},",
				"          {Lineage Key}",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: false) ~> NameNorm2",
				"SetAttrsUpdate alterRow(insertIf(2 == 2)) ~> alterRow2",
				"SetAttrsForNew sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          {Customer Key} as integer,",
				"          {WWI Customer ID} as integer,",
				"          Customer as string,",
				"          {Bill To Customer} as string,",
				"          Category as string,",
				"          {Buying Group} as string,",
				"          {Primary Contact} as string,",
				"          {Postal Code} as string,",
				"          {Valid From} as timestamp,",
				"          {Valid To} as timestamp,",
				"          {Lineage Key} as integer",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     batchSize: 50,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          {Customer Key},",
				"          {WWI Customer ID} = CustomerID,",
				"          Customer,",
				"          {Bill To Customer},",
				"          Category,",
				"          {Buying Group},",
				"          {Primary Contact},",
				"          {Postal Code},",
				"          {Valid From} = ValidFrom,",
				"          {Valid To} = ValidTo,",
				"          {Lineage Key}",
				"     ),",
				"     partitionBy('roundRobin', 4)) ~> sinkNew",
				"alterRow2 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          {Customer Key} as integer,",
				"          {WWI Customer ID} as integer,",
				"          Customer as string,",
				"          {Bill To Customer} as string,",
				"          Category as string,",
				"          {Buying Group} as string,",
				"          {Primary Contact} as string,",
				"          {Postal Code} as string,",
				"          {Valid From} as timestamp,",
				"          {Valid To} as timestamp,",
				"          {Lineage Key} as integer",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     batchSize: 50,",
				"     errorHandlingOption: 'allErrors',",
				"     transactionCommit: 'single',",
				"     reportSuccessOnError: false,",
				"     mapColumn(",
				"          {Customer Key},",
				"          {WWI Customer ID} = CustomerID,",
				"          Customer,",
				"          {Bill To Customer},",
				"          Category,",
				"          {Buying Group},",
				"          {Primary Contact},",
				"          {Postal Code},",
				"          {Valid From} = ValidFrom,",
				"          {Valid To} = ValidTo,",
				"          {Lineage Key}",
				"     ),",
				"     partitionBy('roundRobin', 4)) ~> sinkUpdates",
				"AlterRow1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          {Customer Key} as integer,",
				"          {WWI Customer ID} as integer,",
				"          Customer as string,",
				"          {Bill To Customer} as string,",
				"          Category as string,",
				"          {Buying Group} as string,",
				"          {Primary Contact} as string,",
				"          {Postal Code} as string,",
				"          {Valid From} as timestamp,",
				"          {Valid To} as timestamp,",
				"          {Lineage Key} as integer",
				"     ),",
				"     deletable:false,",
				"     insertable:false,",
				"     updateable:true,",
				"     upsertable:false,",
				"     keys:['WWI Customer ID'],",
				"     format: 'table',",
				"     batchSize: 50,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          {Customer Key},",
				"          {WWI Customer ID} = CustomerID,",
				"          Customer,",
				"          {Bill To Customer},",
				"          Category,",
				"          {Buying Group},",
				"          {Primary Contact},",
				"          {Postal Code},",
				"          {Valid From} = ValidFrom,",
				"          {Valid To} = ValidTo,",
				"          {Lineage Key}",
				"     ),",
				"     partitionBy('roundRobin', 4)) ~> sinkInactive"
			]
		}
	}
}